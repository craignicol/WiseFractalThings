#!/usr/bin/env python3

OPCODE_ADD = 1
OPCODE_MULT = 2
OPCODE_READ = 3
OPCODE_WRITE = 4
OPCODE_JUMPIFTRUE = 5
OPCODE_JUMPIFFALSE = 6
OPCODE_LESSTHAN = 7
OPCODE_EQUALS = 8
OPCODE_END = 99

opcode_name    = [None, "+", "*", "Read", "Write", "£True", "£False", "<", "="]
argument_count = [0, 3, 3, 1, 1, 2, 2, 3, 3]

input2 = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,9,19,225,1,136,139,224,101,-17,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,2,218,213,224,1001,224,-4560,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,25,63,224,101,-1575,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,55,31,225,1101,38,15,225,1001,13,88,224,1001,224,-97,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,1002,87,88,224,101,-3344,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1102,39,10,225,1102,7,70,225,1101,19,47,224,101,-66,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1102,49,72,225,102,77,166,224,101,-5544,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,101,32,83,224,101,-87,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,80,5,225,1101,47,57,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,374,101,1,223,223,108,226,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1107,677,677,224,102,2,223,223,1005,224,419,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,434,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,449,101,1,223,223,1007,677,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,479,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,494,1001,223,1,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1007,226,226,224,1002,223,2,223,1005,224,524,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,539,101,1,223,223,8,226,226,224,1002,223,2,223,1006,224,554,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,569,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,584,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,599,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,614,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,629,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,644,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,674,1001,223,1,223,4,223,99,226]

debug = False

def unpack_arguments(ram, current):
        next_opcode = ram[current] % 100

        if current + argument_count[next_opcode] >= len(ram):
            raise ValueError("Cannot unpack {} arguments from: {}".format( argument_count[next_opcode], ram[current:]))

        if argument_count[next_opcode] == 3:
            x, y, z = ram[current+1:current+4]
        elif argument_count[next_opcode] == 2:
            x, y = ram[current+1:current+3]
            z = None
        elif argument_count[next_opcode] == 1:
            x = ram[current+1]
            y, z = None, None
        else:
            x, y, z = None, None, None

        xm = (ram[current] // 100) % 10 == 1
        ym = (ram[current] // 1000) % 10 == 1
        zm = (ram[current] // 10000) % 10 == 1

        xval = x if xm == 1 or x is None else ram[x]
        yval = y if ym == 1 or y is None else ram[y]
        zval = z if zm == 1 or z is None else ram[z]

        if debug:
            print(current, ":", opcode_name[next_opcode], "; {} => {} ; {} => {} ; {} => {}".format(x, xval, y, yval, z, zval))

        return next_opcode, x, xval, y, yval, z, zval

def intcode_run(ram, inputs=[]):
    if len(ram) < 1:
        return ram

    current = 0
    next_input = 0
    output = []

    while ram[current] % 100 != OPCODE_END:
        next_opcode, x, xval, y, yval, z, zval = unpack_arguments(ram, current)

        if next_opcode == OPCODE_ADD:
            ram[z] = xval + yval
        elif next_opcode == OPCODE_MULT:
            ram[z] = xval * yval
        elif next_opcode == OPCODE_READ:
            ram[x] = inputs[next_input]
            next_input += 1
        elif next_opcode == OPCODE_WRITE:
            output.append(xval)
        elif next_opcode == OPCODE_JUMPIFTRUE:
            current = yval if xval != 0 else current + 3
            continue
        elif next_opcode == OPCODE_JUMPIFFALSE:
            current = yval if xval == 0 else current + 3
            continue
        elif next_opcode == OPCODE_LESSTHAN:
            ram[z] = 1 if xval < yval else 0
        elif next_opcode == OPCODE_EQUALS:
            ram[z] = 1 if xval == yval else 0
        else:
            return [] # Error

        if next_opcode <= len(argument_count):
            current += argument_count[next_opcode] + 1        
 
    return output

def execute():
    return intcode_run(input2, [5])

def verify(a, b):
    if (a == b):
        print("✓")
        return
    
    print (locals())

def test_cases():
    verify([], intcode_run([]))

    verify([0], intcode_run([3,9,8,9,10,9,4,9,99,-1,8], [7]))
    verify([1], intcode_run([3,9,8,9,10,9,4,9,99,-1,8], [8]))
    verify([1], intcode_run([3,9,7,9,10,9,4,9,99,-1,8], [7]))
    verify([0], intcode_run([3,9,7,9,10,9,4,9,99,-1,8], [8]))
    verify([0], intcode_run([3,3,1108,-1,8,3,4,3,99], [7]))
    verify([1], intcode_run([3,3,1108,-1,8,3,4,3,99], [8]))
    verify([1], intcode_run([3,3,1107,-1,8,3,4,3,99], [7]))
    verify([0], intcode_run([3,3,1107,-1,8,3,4,3,99], [8]))

    verify([0], intcode_run([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [0]))
    verify([1], intcode_run([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [-5]))
    verify([0], intcode_run([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [0]))
    verify([1], intcode_run([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [100]))
    verify([1000], intcode_run([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [8]))
    verify([999], intcode_run([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [-8]))
    verify([1001], intcode_run([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99], [88]))


if __name__ == "__main__":
    test_cases()
    print(execute())